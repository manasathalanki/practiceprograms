package review;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

import com.wissen.review.Employee;

public class SortingMap {

	public static void main(String[] args) {
		Map<Integer,String> map=new HashMap<>();
		map.put(5, "manasa5");
		map.put(1, "manasa1");
		map.put(4, "manasa4");
		map.put(2, "manasa2");
		
		//sorting using anonymous class
		List<Entry<Integer,String>> listEntries=new ArrayList<>(map.entrySet());
//		Collections.sort(listEntries,new Comparator<Entry<Integer,String>>() {
//			@Override
//			public int compare(Entry<Integer, String> o1, Entry<Integer, String> o2) {
//				// TODO Auto-generated method stub
//				return o1.getKey()-o2.getKey();
//			}
//		});
		
		//sorting using lamda expression
//		Collections.sort(listEntries,(o1,o2)->o1.getKey()-o2.getKey());
		//descending order
//		Collections.sort(listEntries,(o1,o2)->o2.getKey()-o1.getKey());
		
		//using java8 in descending order
//		listEntries.stream().sorted((o1,o2)->o2.getKey().compareTo(o1.getKey())).forEach(System.out::println);
//		listEntries.stream().sorted(Map.Entry.comparingByKey()).forEach(System.out::println);
//		listEntries.stream().sorted(Map.Entry.comparingByValue()).forEach(System.out::println);
		Map<Employee,Integer> employeelist=new TreeMap<>(new Comparator<Employee>() {

			@Override
			public int compare(Employee o1, Employee o2) {
				return (int) (o1.getSalary()-o2.getSalary());
			}
		});
		employeelist.put(new Employee(1219, "testuser", "ggggg", "eee", 50000.00, "shanthi nagar"),10);
		employeelist.put(new Employee(1225, "superuser", "ttfghh", "eee", 12000.00, "colony-cmrit"),25);
		employeelist.put(new Employee(1204, "wuser", "ttfghh", "eee", 29000.00, "colony-beml"),56);
		employeelist.put(new Employee(1201, "vuser", "ttfghh", "eee", 40000.00, "brifge-colony"),5);
		employeelist.put(new Employee(1210, "auser", "ttfghh", "eee", 88000.00, "street-colony"),12);
		
		
		
	}

}
