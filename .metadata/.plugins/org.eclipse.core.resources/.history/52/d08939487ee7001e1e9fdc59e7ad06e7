package review;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class MapReduceExample {

	public static void main(String[] args) {

		List<Integer> numbersList = Arrays.asList(2, 6, 2, 1, 3);
		// sum of the numbers
//		int sum=0;
//		for(int n:numbersList)
//		{
//			sum=sum+n;
//		}
//		System.out.println(sum);

		// using java 8 addition
		int sum1 = numbersList.stream().mapToInt(i -> i).sum();
		System.out.println(sum1);

		int reduceSum = numbersList.stream().reduce(0, (a, b) -> a + b);
		System.out.println(reduceSum);

		Optional<Integer> optionalSum = numbersList.stream().reduce(Integer::sum);
		System.out.println(optionalSum.get());

		// using java8 multiplication
		int mulSum = numbersList.stream().reduce(1, (a, b) -> a * b);
		System.out.println(mulSum);

		// using java8 max value
		int maxValue = numbersList.stream().reduce(0, (a, b) -> a > b ? a : b);
		System.out.println(maxValue);

		int optionalMax = numbersList.stream().reduce(Integer::max).get();
		System.out.println(optionalMax);
	}

}
